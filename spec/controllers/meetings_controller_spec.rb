require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe MeetingsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Meeting. As you add validations to Meeting, be sure to
  # adjust the attributes here as well.
  describe 'List All meetings' do
        fixtures :meetings
        fixtures :interests
        it 'should render the index view' do
            get :index
            expect(response).to render_template("index")
        end
  end
  
  describe 'Add new meetings' do
        fixtures :meetings
        fixtures :interests
        it 'should render the new meetings view for registered user' do
            controller.instance_variable_set(:@current_user, User.new(:id => 1, :position => "Staff")) 
            get :new
            expect(response).to render_template("new")
        end
        it 'should return to login to unregisted user' do
            get :new
            expect(response).to render_template("new")
        end
        it 'should render calendar after create' do
            
          post :create, params: {"meeting" => {"name"=>"Potter Fans of Iowa", "start_time(1i)"=>"2016", "start_time(2i)"=>"11", "start_time(3i)"=>"26", "approx_time"=>"Around 5"}, "selected_groups"=>{"1"=>"1", "2"=>"1", "3"=>"1"} }
          expect(flash[:notice]).to eq("Meeting was added to the Calendar")
          expect(response).to redirect_to(view_calendar_path)
        end
        
        it 'should fail if no associations' do
          post :create, params: {"meeting" => {"name"=>"Potter Fans of Iowa", "start_time(1i)"=>"2016", "start_time(2i)"=>"11", "start_time(3i)"=>"26", "approx_time"=>"Around 5"}, "selected_groups"=>{} }
          expect(flash[:notice]).to eq("No Interest Groups Were Selected")
          expect(response).to redirect_to(view_calendar_path)
        end
  end
  describe 'Delete a meeting' do
        fixtures :meetings
        fixtures :interests
        
        it 'should delete the meeting passed in params' do
            
          delete :destroy, params: { :id => 1} 
          expect(flash[:notice]).to eq("Meeting was deleted")
          expect(response).to redirect_to(view_calendar_path)
        end
        
  end
  describe 'Search a meeting' do
        fixtures :meetings
        fixtures :interests
        
        it 'should render the search screen' do
          fake_group = [double("Group")]
          fake_meeting = [double("Meeting")]
          allow(Interest).to receive(:find).with("1").and_return(fake_group[0])
          allow(fake_group[0]).to receive(:meetings).and_return(fake_meeting[0])
          allow(fake_meeting[0]).to receive(:empty?).and_return(false)
          allow(fake_group[0]).to receive(:genre).and_return("genre")
          allow(fake_meeting[0]).to receive(:all).and_return("")

          post :search, params: { "selected_groups" => {"1" => "1"}} 
          expect(response).to render_template("search")
        end
        
        it 'should validate search params' do
          
          post :search, params: { "selected_groups" => []} 
          expect(flash[:notice]).to eq("No Interest Groups Were Selected")
          expect(response).to redirect_to(meetings_path)
        end
        
  end
  
  describe 'Add a user to  a meeting' do
        fixtures :meetings
        fixtures :interests
        fixtures :users
        
        it 'should render view calendar path after creating associations' do
            
          get :add, params: { :meeting => '1', :user => '1'} 
          expect(response).to redirect_to(view_calendar_path)
        end
        
  end
  
  describe 'Show interest groups associated with a meeting' do
        fixtures :meetings
        fixtures :interests
        fixtures :users
        
        it 'should render the meeting desrciption' do
            
          get :show, params: { :meeting_id => '1'} 
          expect(response).to render_template("show")
        end
        
  end
end
